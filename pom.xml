<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<groupId>de.catma</groupId>
	<artifactId>catma</artifactId>
	<version>7.2-SNAPSHOT</version>
	<name>catma</name>
	<packaging>war</packaging>

	<prerequisites>
		<maven>3</maven>
	</prerequisites>

	<properties>
		<vaadin.version>8.14.3</vaadin.version>
		<vaadin.plugin.version>${vaadin.version}</vaadin.plugin.version>
		<!-- If there are no local customizations, this can also be "fetch" or "cdn" -->
		<vaadin.widgetset.mode>local</vaadin.widgetset.mode>

		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<maven.compiler.source>21</maven.compiler.source>
		<maven.compiler.target>21</maven.compiler.target>
		<maven.compiler.release>21</maven.compiler.release>

		<jetty.plugin.version>12.0.16</jetty.plugin.version>
		
		<jersey.version>2.45</jersey.version>
	</properties>

	<repositories>
		<repository>
			<id>vaadin-addons</id>
			<url>https://maven.vaadin.com/vaadin-addons</url>
		</repository>
	</repositories>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>com.vaadin</groupId>
				<artifactId>vaadin-bom</artifactId>
				<version>${vaadin.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>4.0.1</version>
			<scope>provided</scope>
		</dependency>

		<!-- Vaadin & addons (Ref: https://vaadin.com/docs/v8/framework/getting-started/getting-started-libraries)
			 "Note that the vaadin-client-compiler and vaadin-client JARs should not be deployed with the web application. The Maven scope provided can be used.
			 Some other libraries, such as vaadin-sass-compiler, are not needed in production deployment."
		 -->
		<dependency>
			<groupId>com.vaadin</groupId>
			<artifactId>vaadin-server</artifactId>
		</dependency>
		<dependency>
			<groupId>com.vaadin</groupId>
			<artifactId>vaadin-themes</artifactId>
		</dependency>
		<dependency>
			<groupId>com.vaadin</groupId>
			<artifactId>vaadin-push</artifactId>
		</dependency>
		<!-- "This library is not needed if you compile the application widget set with the Vaadin Client Compiler."
		<dependency>
			<groupId>com.vaadin</groupId>
			<artifactId>vaadin-client-compiled</artifactId>
		</dependency>
		-->
		<dependency>
			<groupId>com.vaadin</groupId>
			<artifactId>vaadin-client</artifactId>
			<scope>provided</scope>
		</dependency>
		<!-- Note: We're using the Vaadin Client Compiler, but it's commented here because compilation is handled by vaadin-maven-plugin.
		<dependency>
			<groupId>com.vaadin</groupId>
			<artifactId>vaadin-client-compiler</artifactId>
			<scope>provided</scope>
		</dependency>
		-->

		<dependency>
			<groupId>com.vaadin</groupId>
			<artifactId>vaadin-context-menu</artifactId>
		</dependency>
		<dependency>
			<groupId>org.vaadin</groupId>
			<artifactId>elements</artifactId>
			<!-- https://github.com/forTEXT/serverside-elements/releases/tag/0.2.3-CATMA -->
			<version>0.2.3-CATMA</version>
		</dependency>
		<dependency>
		   <groupId>org.vaadin.addon</groupId>
		   <artifactId>confirmdialog</artifactId>
		   <version>3.2.0</version>
		</dependency>
		<dependency>
		   <groupId>org.vaadin.addons</groupId>
		   <artifactId>vaadin-sliderpanel</artifactId>
		   <version>2.2.1</version>
		</dependency>
		<dependency>
			<groupId>com.wcs.wcslib</groupId>
			<artifactId>wcslib-vaadin-widget-multifileupload</artifactId>
			<version>4.0</version>
		</dependency>
		<dependency>
			<groupId>com.github.vaadin4qbanos</groupId>
			<artifactId>jsclipboard</artifactId>
			<version>1.0.12</version>
		</dependency>

		<!-- Material Design theme for Vaadin (https://github.com/appreciated/material) -->
		<dependency>
			<groupId>com.github.appreciated</groupId>
			<artifactId>material</artifactId>
			<version>1.1.8</version>
		</dependency>

		<!-- Apache Commons -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-compress</artifactId>
			<version>1.26.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-csv</artifactId>
			<version>1.10.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-email</artifactId>
			<version>1.6.0</version>
			<exclusions>
				<!-- prefer jakarta.activation:jakarta.activation-api that comes with gitlab4j-api -->
				<exclusion>
					<groupId>com.sun.activation</groupId>
					<artifactId>jakarta.activation</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.17.0</version>
		</dependency>

		<!-- Apache HTTP (used for OAuth login and document loading over HTTP) -->
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpcore</artifactId>
			<version>4.4.16</version>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.5.14</version>
			<exclusions>
				<!-- prefer org.slf4j:jcl-over-slf4j implementation that comes with tika-parsers -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Hazelcast & caching (used for cross-session comms and caching of signup tokens and project invitation codes) -->
		<dependency>
			<groupId>com.hazelcast</groupId>
			<artifactId>hazelcast</artifactId>
			<version>5.3.6</version>
		</dependency>
		<dependency>
			<groupId>javax.cache</groupId>
			<artifactId>cache-api</artifactId>
			<version>1.1.1</version>
		</dependency>

		<!-- Guava -->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>31.1-jre</version>
			<exclusions>
				<exclusion>
					<groupId>com.google.code.findbugs</groupId>
					<artifactId>jsr305</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava-gwt</artifactId>
			<version>31.1-jre</version>
		</dependency>

		<!-- JGit -->
		<!-- TODO: update - needs review/removal of Relative... JGit classes that were required while we still used submodules but should be fine to remove now -->
		<dependency>
			<groupId>org.eclipse.jgit</groupId>
			<artifactId>org.eclipse.jgit</artifactId>
			<version>4.11.8.201904181247-r</version>
		</dependency>

		<!-- GitLab -->
		<dependency>
			<groupId>org.gitlab4j</groupId>
			<artifactId>gitlab4j-api</artifactId>
			<!-- https://github.com/forTEXT/gitlab4j-api/releases/tag/gitlab4j-api-5.0.1-CATMA-v2 -->
			<version>5.0.1-CATMA-v2</version>
			<exclusions>
				<!-- prefer the jackson version that comes with swagger-jaxrs2 -->
				<exclusion>
					<groupId>com.fasterxml.jackson.core</groupId>
					<artifactId>jackson-annotations</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Apache Tika & Lucene (used for document parsing & indexing) -->
		<dependency>
			<groupId>org.apache.tika</groupId>
			<artifactId>tika-parsers</artifactId>
			<version>1.28.5</version>
			<exclusions>
				<exclusion>
					<groupId>c3p0</groupId>
					<artifactId>c3p0</artifactId>
				</exclusion>
				<!-- prefer jakarta.activation:jakarta.activation-api that comes with gitlab4j-api -->
				<exclusion>
					<groupId>com.sun.activation</groupId>
					<artifactId>jakarta.activation</artifactId>
				</exclusion>
				<!-- prefer com.github.stephenc.jcip:jcip-annotations implementation that comes with nimbus-jose-jwt -->
				<exclusion>
					<groupId>net.jcip</groupId>
					<artifactId>jcip-annotations</artifactId>
				</exclusion>
				<!-- prefer org.slf4j:jcl-over-slf4j implementation that comes with tika-parsers -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
				<!-- prefer the jackson version that comes with swagger-jaxrs2 -->
				<exclusion>
					<groupId>com.fasterxml.jackson.core</groupId>
					<artifactId>jackson-core</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.fasterxml.jackson.core</groupId>
					<artifactId>jackson-databind</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.fasterxml.jackson.core</groupId>
					<artifactId>jackson-annotations</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.tika</groupId>
			<artifactId>tika-langdetect</artifactId>
			<version>1.28.5</version>
		</dependency>
		<dependency>
			<groupId>org.apache.lucene</groupId>
			<artifactId>lucene-core</artifactId>
			<version>8.11.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.lucene</groupId>
			<artifactId>lucene-analyzers-common</artifactId>
			<version>8.11.2</version>
		</dependency>

		<!-- ANTLR (used for the query language) -->
		<dependency>
			<groupId>org.antlr</groupId>
			<artifactId>antlr-runtime</artifactId>
			<version>3.5.3</version>
		</dependency>

		<!-- XML handling -->
		<!-- TODO: replace, see related TODO in HazelCastInitializerServlet -->
		<dependency>
			<groupId>com.io7m.xom</groupId>
			<artifactId>xom</artifactId>
			<version>1.2.10</version>
		</dependency>
		<!-- Force a higher version of xml-apis than the one xom wants to avoid a ClassNotFoundException for org.w3c.dom.ElementTraversal -->
		<dependency>
			<groupId>xml-apis</groupId>
			<artifactId>xml-apis</artifactId>
			<version>1.4.01</version>
		</dependency>

		<!-- JSON handling -->
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.10.1</version>
		</dependency>

		<!-- SQLite -->
		<dependency>
			<groupId>org.xerial</groupId>
			<artifactId>sqlite-jdbc</artifactId>
			<version>3.41.2.2</version>
		</dependency>

		<!-- API -->
		<dependency>
			<groupId>org.glassfish.jersey.containers</groupId>
			<artifactId>jersey-container-servlet</artifactId>
			<version>${jersey.version}</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.core</groupId>
			<artifactId>jersey-server</artifactId>
			<version>${jersey.version}</version>
		</dependency>
		<dependency>
			<groupId>com.nimbusds</groupId>
			<artifactId>nimbus-jose-jwt</artifactId>
			<version>9.37.3</version>
			<exclusions>
				<exclusion>  <!-- has vulnerabilities and is used only for tests -->
					<groupId>org.bitbucket.b_c</groupId>
					<artifactId>jose4j</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>io.swagger.core.v3</groupId>
			<artifactId>swagger-jaxrs2</artifactId>
			<version>2.2.30</version>
		</dependency>
		<!-- Force a higher version of commons-lang3 than we would otherwise get transitively (via jsclipboard) - avoids a NoSuchMethodError for
			 org.apache.commons.lang3.math.NumberUtils.isCreatable
		 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.17.0</version>
		</dependency>

		<!-- Test dependencies -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>5.9.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>4.11.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.awaitility</groupId>
			<artifactId>awaitility</artifactId>
			<version>4.2.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.test-framework</groupId>
			<artifactId>jersey-test-framework-core</artifactId>
			<version>${jersey.version}</version>
			<scope>test</scope>
		</dependency>
		<!--<dependency>
			<groupId>org.glassfish.jersey.test-framework.providers</groupId>
			<artifactId>jersey-test-framework-provider-jetty</artifactId>
			<version>${jersey.version}</version>
			<scope>test</scope>
		</dependency>-->
		<dependency>
			<groupId>org.glassfish.jersey.test-framework.providers</groupId>
			<artifactId>jersey-test-framework-provider-grizzly2</artifactId>
			<version>${jersey.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>3.8.0</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>3.5.0</version>
				<executions>
					<execution>
						<id>enforce-lib-ban</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<bannedDependencies>
									<!-- ref: https://stackoverflow.com/a/65144335/207981 -->
									<!-- the activation framework was renamed to jakarta activation framework -->
									<excludes>
										<exclude>javax.activation:javax.activation-api</exclude>
										<exclude>com.sun.activation:javax.activation</exclude>
										<exclude>javax.activation:activation</exclude>
									</excludes>
									<message>use jakarta.activation:jakarta.activation-api or com.sun.activation:jakarta.activation instead of
										javax.activation</message>
								</bannedDependencies>
								<!-- if you use com.sun.activation:jakarta.activation
								<bannedDependencies>
									<!- - the implementation com.sun.activation:jakarta.activation contains the api classes too - ->
									<excludes>
										<exclude>jakarta.activation:jakarta.activation-api</exclude>
									</excludes>
									<message>the implementation com.sun.activation:jakarta.activation is included and it contains the api classes too</message>
								</bannedDependencies>-->
								<bannedDependencies>
									<excludes>
										<exclude>net.jcip:jcip-annotations</exclude>
									</excludes>
									<message>prefer com.github.stephenc.jcip:jcip-annotations implementation over net.jcip:jcip-annotations</message>
								</bannedDependencies>
								<bannedDependencies>
									<excludes>
										<exclude>commons-logging:commons-logging</exclude>
									</excludes>
									<message>prefer org.slf4j:jcl-over-slf4j implementation over commons-logging:commons-logging</message>
								</bannedDependencies>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>3.4.0</version>
				<configuration>
					<failOnMissingWebXml>true</failOnMissingWebXml>
					<webXml>src/main/webapp/WEB-INF/web.xml</webXml>
					<!-- Exclude any properties files in src/main/webapp as well as an unnecessary file generated by the GWT compiler -->
					<packagingExcludes>*.properties,WEB-INF/classes/VAADIN/widgetsets/WEB-INF/**</packagingExcludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>com.vaadin</groupId>
				<artifactId>vaadin-maven-plugin</artifactId>
				<version>${vaadin.plugin.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>update-theme</goal>
							<goal>update-widgetset</goal>
							<goal>compile</goal>
							<!-- Comment out compile-theme goal to use on-the-fly theme compilation -->
							<goal>compile-theme</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-clean-plugin</artifactId>
				<version>3.4.0</version>
				<!-- Also clean up any pre-compiled themes -->
				<configuration>
					<filesets>
						<fileset>
							<directory>src/main/webapp/VAADIN/themes</directory>
							<includes>
								<include>**/styles.css</include>
								<include>**/styles.scss.cache</include>
							</includes>
						</fileset>
					</filesets>
				</configuration>
			</plugin>

			<!-- The Jetty plugin allows us to easily test the development build by running jetty:run on the command line -->
			<plugin>
				<groupId>org.eclipse.jetty.ee8</groupId>
				<artifactId>jetty-ee8-maven-plugin</artifactId>
				<version>${jetty.plugin.version}</version>
				<configuration>
					<scan>0</scan>
					<webApp>
						<contextPath>/</contextPath>
					</webApp>
				</configuration>
				<dependencies>
					<!-- To run websockets in embedded server -->
					<dependency>
						<groupId>org.eclipse.jetty.ee8.websocket</groupId>
						<artifactId>jetty-ee8-websocket-javax-server</artifactId>
						<version>${jetty.plugin.version}</version>
					</dependency>
				</dependencies>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<!-- Vaadin pre-release repositories -->
			<id>vaadin-prerelease</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>

			<repositories>
				<repository>
					<id>vaadin-prereleases</id>
					<url>https://maven.vaadin.com/vaadin-prereleases</url>
				</repository>
				<repository>
					<id>vaadin-snapshots</id>
					<url>https://oss.sonatype.org/content/repositories/vaadin-snapshots/</url>
					<releases>
						<enabled>false</enabled>
					</releases>
					<snapshots>
						<enabled>true</enabled>
					</snapshots>
				</repository>
			</repositories>
			<pluginRepositories>
				<pluginRepository>
					<id>vaadin-prereleases</id>
					<url>https://maven.vaadin.com/vaadin-prereleases</url>
				</pluginRepository>
				<pluginRepository>
					<id>vaadin-snapshots</id>
					<url>https://oss.sonatype.org/content/repositories/vaadin-snapshots/</url>
					<releases>
						<enabled>false</enabled>
					</releases>
					<snapshots>
						<enabled>true</enabled>
					</snapshots>
				</pluginRepository>
			</pluginRepositories>
		</profile>
	</profiles>
</project>
